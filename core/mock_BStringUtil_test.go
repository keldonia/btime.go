// Code generated by mockery v2.20.2. DO NOT EDIT.

package core

import (
	models "github.com/keldonia/btime.go/models"
	mock "github.com/stretchr/testify/mock"
)

// MockBStringUtil is an autogenerated mock type for the BStringUtil type
type MockBStringUtil struct {
	mock.Mock
}

type MockBStringUtil_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBStringUtil) EXPECT() *MockBStringUtil_Expecter {
	return &MockBStringUtil_Expecter{mock: &_m.Mock}
}

// DecimalToBString provides a mock function with given fields: decimal
func (_m *MockBStringUtil) DecimalToBString(decimal float64) string {
	ret := _m.Called(decimal)

	var r0 string
	if rf, ok := ret.Get(0).(func(float64) string); ok {
		r0 = rf(decimal)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockBStringUtil_DecimalToBString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecimalToBString'
type MockBStringUtil_DecimalToBString_Call struct {
	*mock.Call
}

// DecimalToBString is a helper method to define mock.On call
//   - decimal float64
func (_e *MockBStringUtil_Expecter) DecimalToBString(decimal interface{}) *MockBStringUtil_DecimalToBString_Call {
	return &MockBStringUtil_DecimalToBString_Call{Call: _e.mock.On("DecimalToBString", decimal)}
}

func (_c *MockBStringUtil_DecimalToBString_Call) Run(run func(decimal float64)) *MockBStringUtil_DecimalToBString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *MockBStringUtil_DecimalToBString_Call) Return(_a0 string) *MockBStringUtil_DecimalToBString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBStringUtil_DecimalToBString_Call) RunAndReturn(run func(float64) string) *MockBStringUtil_DecimalToBString_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateBString provides a mock function with given fields: appt
func (_m *MockBStringUtil) GenerateBString(appt *models.Appointment) (*string, error) {
	ret := _m.Called(appt)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Appointment) (*string, error)); ok {
		return rf(appt)
	}
	if rf, ok := ret.Get(0).(func(*models.Appointment) *string); ok {
		r0 = rf(appt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Appointment) error); ok {
		r1 = rf(appt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBStringUtil_GenerateBString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateBString'
type MockBStringUtil_GenerateBString_Call struct {
	*mock.Call
}

// GenerateBString is a helper method to define mock.On call
//   - appt *models.Appointment
func (_e *MockBStringUtil_Expecter) GenerateBString(appt interface{}) *MockBStringUtil_GenerateBString_Call {
	return &MockBStringUtil_GenerateBString_Call{Call: _e.mock.On("GenerateBString", appt)}
}

func (_c *MockBStringUtil_GenerateBString_Call) Run(run func(appt *models.Appointment)) *MockBStringUtil_GenerateBString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Appointment))
	})
	return _c
}

func (_c *MockBStringUtil_GenerateBString_Call) Return(_a0 *string, _a1 error) *MockBStringUtil_GenerateBString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBStringUtil_GenerateBString_Call) RunAndReturn(run func(*models.Appointment) (*string, error)) *MockBStringUtil_GenerateBString_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateBStringFromAppointments provides a mock function with given fields: appointments
func (_m *MockBStringUtil) GenerateBStringFromAppointments(appointments *[]models.Appointment) (*[]string, error) {
	ret := _m.Called(appointments)

	var r0 *[]string
	var r1 error
	if rf, ok := ret.Get(0).(func(*[]models.Appointment) (*[]string, error)); ok {
		return rf(appointments)
	}
	if rf, ok := ret.Get(0).(func(*[]models.Appointment) *[]string); ok {
		r0 = rf(appointments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*[]models.Appointment) error); ok {
		r1 = rf(appointments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBStringUtil_GenerateBStringFromAppointments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateBStringFromAppointments'
type MockBStringUtil_GenerateBStringFromAppointments_Call struct {
	*mock.Call
}

// GenerateBStringFromAppointments is a helper method to define mock.On call
//   - appointments *[]models.Appointment
func (_e *MockBStringUtil_Expecter) GenerateBStringFromAppointments(appointments interface{}) *MockBStringUtil_GenerateBStringFromAppointments_Call {
	return &MockBStringUtil_GenerateBStringFromAppointments_Call{Call: _e.mock.On("GenerateBStringFromAppointments", appointments)}
}

func (_c *MockBStringUtil_GenerateBStringFromAppointments_Call) Run(run func(appointments *[]models.Appointment)) *MockBStringUtil_GenerateBStringFromAppointments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*[]models.Appointment))
	})
	return _c
}

func (_c *MockBStringUtil_GenerateBStringFromAppointments_Call) Return(_a0 *[]string, _a1 error) *MockBStringUtil_GenerateBStringFromAppointments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBStringUtil_GenerateBStringFromAppointments_Call) RunAndReturn(run func(*[]models.Appointment) (*[]string, error)) *MockBStringUtil_GenerateBStringFromAppointments_Call {
	_c.Call.Return(run)
	return _c
}

// ParseBString provides a mock function with given fields: bString
func (_m *MockBStringUtil) ParseBString(bString string) (*int64, error) {
	ret := _m.Called(bString)

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*int64, error)); ok {
		return rf(bString)
	}
	if rf, ok := ret.Get(0).(func(string) *int64); ok {
		r0 = rf(bString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBStringUtil_ParseBString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseBString'
type MockBStringUtil_ParseBString_Call struct {
	*mock.Call
}

// ParseBString is a helper method to define mock.On call
//   - bString string
func (_e *MockBStringUtil_Expecter) ParseBString(bString interface{}) *MockBStringUtil_ParseBString_Call {
	return &MockBStringUtil_ParseBString_Call{Call: _e.mock.On("ParseBString", bString)}
}

func (_c *MockBStringUtil_ParseBString_Call) Run(run func(bString string)) *MockBStringUtil_ParseBString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockBStringUtil_ParseBString_Call) Return(_a0 *int64, _a1 error) *MockBStringUtil_ParseBString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBStringUtil_ParseBString_Call) RunAndReturn(run func(string) (*int64, error)) *MockBStringUtil_ParseBString_Call {
	_c.Call.Return(run)
	return _c
}

// TimeStringSplit provides a mock function with given fields: scheduleString
func (_m *MockBStringUtil) TimeStringSplit(scheduleString string) []string {
	ret := _m.Called(scheduleString)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(scheduleString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockBStringUtil_TimeStringSplit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TimeStringSplit'
type MockBStringUtil_TimeStringSplit_Call struct {
	*mock.Call
}

// TimeStringSplit is a helper method to define mock.On call
//   - scheduleString string
func (_e *MockBStringUtil_Expecter) TimeStringSplit(scheduleString interface{}) *MockBStringUtil_TimeStringSplit_Call {
	return &MockBStringUtil_TimeStringSplit_Call{Call: _e.mock.On("TimeStringSplit", scheduleString)}
}

func (_c *MockBStringUtil_TimeStringSplit_Call) Run(run func(scheduleString string)) *MockBStringUtil_TimeStringSplit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockBStringUtil_TimeStringSplit_Call) Return(_a0 []string) *MockBStringUtil_TimeStringSplit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBStringUtil_TimeStringSplit_Call) RunAndReturn(run func(string) []string) *MockBStringUtil_TimeStringSplit_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockBStringUtil interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockBStringUtil creates a new instance of MockBStringUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBStringUtil(t mockConstructorTestingTNewMockBStringUtil) *MockBStringUtil {
	mock := &MockBStringUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
