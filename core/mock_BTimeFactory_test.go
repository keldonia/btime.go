// Code generated by mockery v2.20.2. DO NOT EDIT.

package core

import (
	models "github.com/keldonia/btime.go/models"
	mock "github.com/stretchr/testify/mock"
)

// MockBTimeFactory is an autogenerated mock type for the BTimeFactory type
type MockBTimeFactory struct {
	mock.Mock
}

type MockBTimeFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBTimeFactory) EXPECT() *MockBTimeFactory_Expecter {
	return &MockBTimeFactory_Expecter{mock: &_m.Mock}
}

// ConvertScheduleToAppointmentSchedule provides a mock function with given fields: schedule, availability
func (_m *MockBTimeFactory) ConvertScheduleToAppointmentSchedule(schedule *models.Schedule, availability []string) *models.AppointmentSchedule {
	ret := _m.Called(schedule, availability)

	var r0 *models.AppointmentSchedule
	if rf, ok := ret.Get(0).(func(*models.Schedule, []string) *models.AppointmentSchedule); ok {
		r0 = rf(schedule, availability)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AppointmentSchedule)
		}
	}

	return r0
}

// MockBTimeFactory_ConvertScheduleToAppointmentSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertScheduleToAppointmentSchedule'
type MockBTimeFactory_ConvertScheduleToAppointmentSchedule_Call struct {
	*mock.Call
}

// ConvertScheduleToAppointmentSchedule is a helper method to define mock.On call
//   - schedule *models.Schedule
//   - availability []string
func (_e *MockBTimeFactory_Expecter) ConvertScheduleToAppointmentSchedule(schedule interface{}, availability interface{}) *MockBTimeFactory_ConvertScheduleToAppointmentSchedule_Call {
	return &MockBTimeFactory_ConvertScheduleToAppointmentSchedule_Call{Call: _e.mock.On("ConvertScheduleToAppointmentSchedule", schedule, availability)}
}

func (_c *MockBTimeFactory_ConvertScheduleToAppointmentSchedule_Call) Run(run func(schedule *models.Schedule, availability []string)) *MockBTimeFactory_ConvertScheduleToAppointmentSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Schedule), args[1].([]string))
	})
	return _c
}

func (_c *MockBTimeFactory_ConvertScheduleToAppointmentSchedule_Call) Return(_a0 *models.AppointmentSchedule) *MockBTimeFactory_ConvertScheduleToAppointmentSchedule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBTimeFactory_ConvertScheduleToAppointmentSchedule_Call) RunAndReturn(run func(*models.Schedule, []string) *models.AppointmentSchedule) *MockBTimeFactory_ConvertScheduleToAppointmentSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// DecimalToBString provides a mock function with given fields: decimal
func (_m *MockBTimeFactory) DecimalToBString(decimal float64) string {
	ret := _m.Called(decimal)

	var r0 string
	if rf, ok := ret.Get(0).(func(float64) string); ok {
		r0 = rf(decimal)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockBTimeFactory_DecimalToBString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecimalToBString'
type MockBTimeFactory_DecimalToBString_Call struct {
	*mock.Call
}

// DecimalToBString is a helper method to define mock.On call
//   - decimal float64
func (_e *MockBTimeFactory_Expecter) DecimalToBString(decimal interface{}) *MockBTimeFactory_DecimalToBString_Call {
	return &MockBTimeFactory_DecimalToBString_Call{Call: _e.mock.On("DecimalToBString", decimal)}
}

func (_c *MockBTimeFactory_DecimalToBString_Call) Run(run func(decimal float64)) *MockBTimeFactory_DecimalToBString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *MockBTimeFactory_DecimalToBString_Call) Return(_a0 string) *MockBTimeFactory_DecimalToBString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBTimeFactory_DecimalToBString_Call) RunAndReturn(run func(float64) string) *MockBTimeFactory_DecimalToBString_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAppointment provides a mock function with given fields: timeSlotToDelete, scheduleSlot
func (_m *MockBTimeFactory) DeleteAppointment(timeSlotToDelete *models.Appointment, scheduleSlot string) (*string, error) {
	ret := _m.Called(timeSlotToDelete, scheduleSlot)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Appointment, string) (*string, error)); ok {
		return rf(timeSlotToDelete, scheduleSlot)
	}
	if rf, ok := ret.Get(0).(func(*models.Appointment, string) *string); ok {
		r0 = rf(timeSlotToDelete, scheduleSlot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Appointment, string) error); ok {
		r1 = rf(timeSlotToDelete, scheduleSlot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBTimeFactory_DeleteAppointment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAppointment'
type MockBTimeFactory_DeleteAppointment_Call struct {
	*mock.Call
}

// DeleteAppointment is a helper method to define mock.On call
//   - timeSlotToDelete *models.Appointment
//   - scheduleSlot string
func (_e *MockBTimeFactory_Expecter) DeleteAppointment(timeSlotToDelete interface{}, scheduleSlot interface{}) *MockBTimeFactory_DeleteAppointment_Call {
	return &MockBTimeFactory_DeleteAppointment_Call{Call: _e.mock.On("DeleteAppointment", timeSlotToDelete, scheduleSlot)}
}

func (_c *MockBTimeFactory_DeleteAppointment_Call) Run(run func(timeSlotToDelete *models.Appointment, scheduleSlot string)) *MockBTimeFactory_DeleteAppointment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Appointment), args[1].(string))
	})
	return _c
}

func (_c *MockBTimeFactory_DeleteAppointment_Call) Return(_a0 *string, _a1 error) *MockBTimeFactory_DeleteAppointment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBTimeFactory_DeleteAppointment_Call) RunAndReturn(run func(*models.Appointment, string) (*string, error)) *MockBTimeFactory_DeleteAppointment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAppointmentBString provides a mock function with given fields: timeSlotToDelete, scheduleSlot
func (_m *MockBTimeFactory) DeleteAppointmentBString(timeSlotToDelete string, scheduleSlot string) (*string, error) {
	ret := _m.Called(timeSlotToDelete, scheduleSlot)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*string, error)); ok {
		return rf(timeSlotToDelete, scheduleSlot)
	}
	if rf, ok := ret.Get(0).(func(string, string) *string); ok {
		r0 = rf(timeSlotToDelete, scheduleSlot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(timeSlotToDelete, scheduleSlot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBTimeFactory_DeleteAppointmentBString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAppointmentBString'
type MockBTimeFactory_DeleteAppointmentBString_Call struct {
	*mock.Call
}

// DeleteAppointmentBString is a helper method to define mock.On call
//   - timeSlotToDelete string
//   - scheduleSlot string
func (_e *MockBTimeFactory_Expecter) DeleteAppointmentBString(timeSlotToDelete interface{}, scheduleSlot interface{}) *MockBTimeFactory_DeleteAppointmentBString_Call {
	return &MockBTimeFactory_DeleteAppointmentBString_Call{Call: _e.mock.On("DeleteAppointmentBString", timeSlotToDelete, scheduleSlot)}
}

func (_c *MockBTimeFactory_DeleteAppointmentBString_Call) Run(run func(timeSlotToDelete string, scheduleSlot string)) *MockBTimeFactory_DeleteAppointmentBString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockBTimeFactory_DeleteAppointmentBString_Call) Return(_a0 *string, _a1 error) *MockBTimeFactory_DeleteAppointmentBString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBTimeFactory_DeleteAppointmentBString_Call) RunAndReturn(run func(string, string) (*string, error)) *MockBTimeFactory_DeleteAppointmentBString_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateBString provides a mock function with given fields: appt
func (_m *MockBTimeFactory) GenerateBString(appt *models.Appointment) (*string, error) {
	ret := _m.Called(appt)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Appointment) (*string, error)); ok {
		return rf(appt)
	}
	if rf, ok := ret.Get(0).(func(*models.Appointment) *string); ok {
		r0 = rf(appt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Appointment) error); ok {
		r1 = rf(appt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBTimeFactory_GenerateBString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateBString'
type MockBTimeFactory_GenerateBString_Call struct {
	*mock.Call
}

// GenerateBString is a helper method to define mock.On call
//   - appt *models.Appointment
func (_e *MockBTimeFactory_Expecter) GenerateBString(appt interface{}) *MockBTimeFactory_GenerateBString_Call {
	return &MockBTimeFactory_GenerateBString_Call{Call: _e.mock.On("GenerateBString", appt)}
}

func (_c *MockBTimeFactory_GenerateBString_Call) Run(run func(appt *models.Appointment)) *MockBTimeFactory_GenerateBString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Appointment))
	})
	return _c
}

func (_c *MockBTimeFactory_GenerateBString_Call) Return(_a0 *string, _a1 error) *MockBTimeFactory_GenerateBString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBTimeFactory_GenerateBString_Call) RunAndReturn(run func(*models.Appointment) (*string, error)) *MockBTimeFactory_GenerateBString_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateBStringFromAppointments provides a mock function with given fields: appointments
func (_m *MockBTimeFactory) GenerateBStringFromAppointments(appointments *[]models.Appointment) (*[]string, error) {
	ret := _m.Called(appointments)

	var r0 *[]string
	var r1 error
	if rf, ok := ret.Get(0).(func(*[]models.Appointment) (*[]string, error)); ok {
		return rf(appointments)
	}
	if rf, ok := ret.Get(0).(func(*[]models.Appointment) *[]string); ok {
		r0 = rf(appointments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*[]models.Appointment) error); ok {
		r1 = rf(appointments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBTimeFactory_GenerateBStringFromAppointments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateBStringFromAppointments'
type MockBTimeFactory_GenerateBStringFromAppointments_Call struct {
	*mock.Call
}

// GenerateBStringFromAppointments is a helper method to define mock.On call
//   - appointments *[]models.Appointment
func (_e *MockBTimeFactory_Expecter) GenerateBStringFromAppointments(appointments interface{}) *MockBTimeFactory_GenerateBStringFromAppointments_Call {
	return &MockBTimeFactory_GenerateBStringFromAppointments_Call{Call: _e.mock.On("GenerateBStringFromAppointments", appointments)}
}

func (_c *MockBTimeFactory_GenerateBStringFromAppointments_Call) Run(run func(appointments *[]models.Appointment)) *MockBTimeFactory_GenerateBStringFromAppointments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*[]models.Appointment))
	})
	return _c
}

func (_c *MockBTimeFactory_GenerateBStringFromAppointments_Call) Return(_a0 *[]string, _a1 error) *MockBTimeFactory_GenerateBStringFromAppointments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBTimeFactory_GenerateBStringFromAppointments_Call) RunAndReturn(run func(*[]models.Appointment) (*[]string, error)) *MockBTimeFactory_GenerateBStringFromAppointments_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyScheduleAndBooking provides a mock function with given fields: scheduleBStringToModify, scheduleBStringToTest, appt
func (_m *MockBTimeFactory) ModifyScheduleAndBooking(scheduleBStringToModify string, scheduleBStringToTest string, appt string) (*string, error) {
	ret := _m.Called(scheduleBStringToModify, scheduleBStringToTest, appt)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*string, error)); ok {
		return rf(scheduleBStringToModify, scheduleBStringToTest, appt)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *string); ok {
		r0 = rf(scheduleBStringToModify, scheduleBStringToTest, appt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(scheduleBStringToModify, scheduleBStringToTest, appt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBTimeFactory_ModifyScheduleAndBooking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyScheduleAndBooking'
type MockBTimeFactory_ModifyScheduleAndBooking_Call struct {
	*mock.Call
}

// ModifyScheduleAndBooking is a helper method to define mock.On call
//   - scheduleBStringToModify string
//   - scheduleBStringToTest string
//   - appt string
func (_e *MockBTimeFactory_Expecter) ModifyScheduleAndBooking(scheduleBStringToModify interface{}, scheduleBStringToTest interface{}, appt interface{}) *MockBTimeFactory_ModifyScheduleAndBooking_Call {
	return &MockBTimeFactory_ModifyScheduleAndBooking_Call{Call: _e.mock.On("ModifyScheduleAndBooking", scheduleBStringToModify, scheduleBStringToTest, appt)}
}

func (_c *MockBTimeFactory_ModifyScheduleAndBooking_Call) Run(run func(scheduleBStringToModify string, scheduleBStringToTest string, appt string)) *MockBTimeFactory_ModifyScheduleAndBooking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockBTimeFactory_ModifyScheduleAndBooking_Call) Return(_a0 *string, _a1 error) *MockBTimeFactory_ModifyScheduleAndBooking_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBTimeFactory_ModifyScheduleAndBooking_Call) RunAndReturn(run func(string, string, string) (*string, error)) *MockBTimeFactory_ModifyScheduleAndBooking_Call {
	_c.Call.Return(run)
	return _c
}

// ParseBString provides a mock function with given fields: bString
func (_m *MockBTimeFactory) ParseBString(bString string) (*int64, error) {
	ret := _m.Called(bString)

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*int64, error)); ok {
		return rf(bString)
	}
	if rf, ok := ret.Get(0).(func(string) *int64); ok {
		r0 = rf(bString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBTimeFactory_ParseBString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseBString'
type MockBTimeFactory_ParseBString_Call struct {
	*mock.Call
}

// ParseBString is a helper method to define mock.On call
//   - bString string
func (_e *MockBTimeFactory_Expecter) ParseBString(bString interface{}) *MockBTimeFactory_ParseBString_Call {
	return &MockBTimeFactory_ParseBString_Call{Call: _e.mock.On("ParseBString", bString)}
}

func (_c *MockBTimeFactory_ParseBString_Call) Run(run func(bString string)) *MockBTimeFactory_ParseBString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockBTimeFactory_ParseBString_Call) Return(_a0 *int64, _a1 error) *MockBTimeFactory_ParseBString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBTimeFactory_ParseBString_Call) RunAndReturn(run func(string) (*int64, error)) *MockBTimeFactory_ParseBString_Call {
	_c.Call.Return(run)
	return _c
}

// TestViabilityAndCompute provides a mock function with given fields: binary1, binary2
func (_m *MockBTimeFactory) TestViabilityAndCompute(binary1 int64, binary2 int64) (*int64, error) {
	ret := _m.Called(binary1, binary2)

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*int64, error)); ok {
		return rf(binary1, binary2)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *int64); ok {
		r0 = rf(binary1, binary2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(binary1, binary2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBTimeFactory_TestViabilityAndCompute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestViabilityAndCompute'
type MockBTimeFactory_TestViabilityAndCompute_Call struct {
	*mock.Call
}

// TestViabilityAndCompute is a helper method to define mock.On call
//   - binary1 int64
//   - binary2 int64
func (_e *MockBTimeFactory_Expecter) TestViabilityAndCompute(binary1 interface{}, binary2 interface{}) *MockBTimeFactory_TestViabilityAndCompute_Call {
	return &MockBTimeFactory_TestViabilityAndCompute_Call{Call: _e.mock.On("TestViabilityAndCompute", binary1, binary2)}
}

func (_c *MockBTimeFactory_TestViabilityAndCompute_Call) Run(run func(binary1 int64, binary2 int64)) *MockBTimeFactory_TestViabilityAndCompute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockBTimeFactory_TestViabilityAndCompute_Call) Return(_a0 *int64, _a1 error) *MockBTimeFactory_TestViabilityAndCompute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBTimeFactory_TestViabilityAndCompute_Call) RunAndReturn(run func(int64, int64) (*int64, error)) *MockBTimeFactory_TestViabilityAndCompute_Call {
	_c.Call.Return(run)
	return _c
}

// TimeStringSplit provides a mock function with given fields: scheduleString
func (_m *MockBTimeFactory) TimeStringSplit(scheduleString string) []string {
	ret := _m.Called(scheduleString)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(scheduleString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockBTimeFactory_TimeStringSplit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TimeStringSplit'
type MockBTimeFactory_TimeStringSplit_Call struct {
	*mock.Call
}

// TimeStringSplit is a helper method to define mock.On call
//   - scheduleString string
func (_e *MockBTimeFactory_Expecter) TimeStringSplit(scheduleString interface{}) *MockBTimeFactory_TimeStringSplit_Call {
	return &MockBTimeFactory_TimeStringSplit_Call{Call: _e.mock.On("TimeStringSplit", scheduleString)}
}

func (_c *MockBTimeFactory_TimeStringSplit_Call) Run(run func(scheduleString string)) *MockBTimeFactory_TimeStringSplit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockBTimeFactory_TimeStringSplit_Call) Return(_a0 []string) *MockBTimeFactory_TimeStringSplit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBTimeFactory_TimeStringSplit_Call) RunAndReturn(run func(string) []string) *MockBTimeFactory_TimeStringSplit_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockBTimeFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockBTimeFactory creates a new instance of MockBTimeFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBTimeFactory(t mockConstructorTestingTNewMockBTimeFactory) *MockBTimeFactory {
	mock := &MockBTimeFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
