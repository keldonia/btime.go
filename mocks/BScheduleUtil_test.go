// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	models "github.com/keldonia/btime.go/models"
	mock "github.com/stretchr/testify/mock"
)

// BScheduleUtil is an autogenerated mock type for the BScheduleUtil type
type BScheduleUtil struct {
	mock.Mock
}

type BScheduleUtil_Expecter struct {
	mock *mock.Mock
}

func (_m *BScheduleUtil) EXPECT() *BScheduleUtil_Expecter {
	return &BScheduleUtil_Expecter{mock: &_m.Mock}
}

// DeleteAppointment provides a mock function with given fields: timeSlotToDelete, scheduleSlot
func (_m *BScheduleUtil) DeleteAppointment(timeSlotToDelete *models.Appointment, scheduleSlot string) (*string, error) {
	ret := _m.Called(timeSlotToDelete, scheduleSlot)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Appointment, string) (*string, error)); ok {
		return rf(timeSlotToDelete, scheduleSlot)
	}
	if rf, ok := ret.Get(0).(func(*models.Appointment, string) *string); ok {
		r0 = rf(timeSlotToDelete, scheduleSlot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Appointment, string) error); ok {
		r1 = rf(timeSlotToDelete, scheduleSlot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BScheduleUtil_DeleteAppointment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAppointment'
type BScheduleUtil_DeleteAppointment_Call struct {
	*mock.Call
}

// DeleteAppointment is a helper method to define mock.On call
//   - timeSlotToDelete *models.Appointment
//   - scheduleSlot string
func (_e *BScheduleUtil_Expecter) DeleteAppointment(timeSlotToDelete interface{}, scheduleSlot interface{}) *BScheduleUtil_DeleteAppointment_Call {
	return &BScheduleUtil_DeleteAppointment_Call{Call: _e.mock.On("DeleteAppointment", timeSlotToDelete, scheduleSlot)}
}

func (_c *BScheduleUtil_DeleteAppointment_Call) Run(run func(timeSlotToDelete *models.Appointment, scheduleSlot string)) *BScheduleUtil_DeleteAppointment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Appointment), args[1].(string))
	})
	return _c
}

func (_c *BScheduleUtil_DeleteAppointment_Call) Return(_a0 *string, _a1 error) *BScheduleUtil_DeleteAppointment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BScheduleUtil_DeleteAppointment_Call) RunAndReturn(run func(*models.Appointment, string) (*string, error)) *BScheduleUtil_DeleteAppointment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAppointmentBString provides a mock function with given fields: bStringToDelete, scheduleSlot
func (_m *BScheduleUtil) DeleteAppointmentBString(bStringToDelete string, scheduleSlot string) (*string, error) {
	ret := _m.Called(bStringToDelete, scheduleSlot)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*string, error)); ok {
		return rf(bStringToDelete, scheduleSlot)
	}
	if rf, ok := ret.Get(0).(func(string, string) *string); ok {
		r0 = rf(bStringToDelete, scheduleSlot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(bStringToDelete, scheduleSlot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BScheduleUtil_DeleteAppointmentBString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAppointmentBString'
type BScheduleUtil_DeleteAppointmentBString_Call struct {
	*mock.Call
}

// DeleteAppointmentBString is a helper method to define mock.On call
//   - bStringToDelete string
//   - scheduleSlot string
func (_e *BScheduleUtil_Expecter) DeleteAppointmentBString(bStringToDelete interface{}, scheduleSlot interface{}) *BScheduleUtil_DeleteAppointmentBString_Call {
	return &BScheduleUtil_DeleteAppointmentBString_Call{Call: _e.mock.On("DeleteAppointmentBString", bStringToDelete, scheduleSlot)}
}

func (_c *BScheduleUtil_DeleteAppointmentBString_Call) Run(run func(bStringToDelete string, scheduleSlot string)) *BScheduleUtil_DeleteAppointmentBString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *BScheduleUtil_DeleteAppointmentBString_Call) Return(_a0 *string, _a1 error) *BScheduleUtil_DeleteAppointmentBString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BScheduleUtil_DeleteAppointmentBString_Call) RunAndReturn(run func(string, string) (*string, error)) *BScheduleUtil_DeleteAppointmentBString_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAppointmentInterval provides a mock function with given fields: timeSlotBString, scheduleInterval
func (_m *BScheduleUtil) DeleteAppointmentInterval(timeSlotBString string, scheduleInterval string) (*string, error) {
	ret := _m.Called(timeSlotBString, scheduleInterval)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*string, error)); ok {
		return rf(timeSlotBString, scheduleInterval)
	}
	if rf, ok := ret.Get(0).(func(string, string) *string); ok {
		r0 = rf(timeSlotBString, scheduleInterval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(timeSlotBString, scheduleInterval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BScheduleUtil_DeleteAppointmentInterval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAppointmentInterval'
type BScheduleUtil_DeleteAppointmentInterval_Call struct {
	*mock.Call
}

// DeleteAppointmentInterval is a helper method to define mock.On call
//   - timeSlotBString string
//   - scheduleInterval string
func (_e *BScheduleUtil_Expecter) DeleteAppointmentInterval(timeSlotBString interface{}, scheduleInterval interface{}) *BScheduleUtil_DeleteAppointmentInterval_Call {
	return &BScheduleUtil_DeleteAppointmentInterval_Call{Call: _e.mock.On("DeleteAppointmentInterval", timeSlotBString, scheduleInterval)}
}

func (_c *BScheduleUtil_DeleteAppointmentInterval_Call) Run(run func(timeSlotBString string, scheduleInterval string)) *BScheduleUtil_DeleteAppointmentInterval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *BScheduleUtil_DeleteAppointmentInterval_Call) Return(_a0 *string, _a1 error) *BScheduleUtil_DeleteAppointmentInterval_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BScheduleUtil_DeleteAppointmentInterval_Call) RunAndReturn(run func(string, string) (*string, error)) *BScheduleUtil_DeleteAppointmentInterval_Call {
	_c.Call.Return(run)
	return _c
}

// MergeScheduleBStringWithTest provides a mock function with given fields: timeSlotBString, schedule
func (_m *BScheduleUtil) MergeScheduleBStringWithTest(timeSlotBString string, schedule string) (*string, error) {
	ret := _m.Called(timeSlotBString, schedule)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*string, error)); ok {
		return rf(timeSlotBString, schedule)
	}
	if rf, ok := ret.Get(0).(func(string, string) *string); ok {
		r0 = rf(timeSlotBString, schedule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(timeSlotBString, schedule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BScheduleUtil_MergeScheduleBStringWithTest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MergeScheduleBStringWithTest'
type BScheduleUtil_MergeScheduleBStringWithTest_Call struct {
	*mock.Call
}

// MergeScheduleBStringWithTest is a helper method to define mock.On call
//   - timeSlotBString string
//   - schedule string
func (_e *BScheduleUtil_Expecter) MergeScheduleBStringWithTest(timeSlotBString interface{}, schedule interface{}) *BScheduleUtil_MergeScheduleBStringWithTest_Call {
	return &BScheduleUtil_MergeScheduleBStringWithTest_Call{Call: _e.mock.On("MergeScheduleBStringWithTest", timeSlotBString, schedule)}
}

func (_c *BScheduleUtil_MergeScheduleBStringWithTest_Call) Run(run func(timeSlotBString string, schedule string)) *BScheduleUtil_MergeScheduleBStringWithTest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *BScheduleUtil_MergeScheduleBStringWithTest_Call) Return(_a0 *string, _a1 error) *BScheduleUtil_MergeScheduleBStringWithTest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BScheduleUtil_MergeScheduleBStringWithTest_Call) RunAndReturn(run func(string, string) (*string, error)) *BScheduleUtil_MergeScheduleBStringWithTest_Call {
	_c.Call.Return(run)
	return _c
}

// MergeScheduleBStringsWithTest provides a mock function with given fields: timeSlot, schedule
func (_m *BScheduleUtil) MergeScheduleBStringsWithTest(timeSlot *models.Appointment, schedule string) (*string, error) {
	ret := _m.Called(timeSlot, schedule)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Appointment, string) (*string, error)); ok {
		return rf(timeSlot, schedule)
	}
	if rf, ok := ret.Get(0).(func(*models.Appointment, string) *string); ok {
		r0 = rf(timeSlot, schedule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Appointment, string) error); ok {
		r1 = rf(timeSlot, schedule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BScheduleUtil_MergeScheduleBStringsWithTest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MergeScheduleBStringsWithTest'
type BScheduleUtil_MergeScheduleBStringsWithTest_Call struct {
	*mock.Call
}

// MergeScheduleBStringsWithTest is a helper method to define mock.On call
//   - timeSlot *models.Appointment
//   - schedule string
func (_e *BScheduleUtil_Expecter) MergeScheduleBStringsWithTest(timeSlot interface{}, schedule interface{}) *BScheduleUtil_MergeScheduleBStringsWithTest_Call {
	return &BScheduleUtil_MergeScheduleBStringsWithTest_Call{Call: _e.mock.On("MergeScheduleBStringsWithTest", timeSlot, schedule)}
}

func (_c *BScheduleUtil_MergeScheduleBStringsWithTest_Call) Run(run func(timeSlot *models.Appointment, schedule string)) *BScheduleUtil_MergeScheduleBStringsWithTest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Appointment), args[1].(string))
	})
	return _c
}

func (_c *BScheduleUtil_MergeScheduleBStringsWithTest_Call) Return(_a0 *string, _a1 error) *BScheduleUtil_MergeScheduleBStringsWithTest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BScheduleUtil_MergeScheduleBStringsWithTest_Call) RunAndReturn(run func(*models.Appointment, string) (*string, error)) *BScheduleUtil_MergeScheduleBStringsWithTest_Call {
	_c.Call.Return(run)
	return _c
}

// MergeScheduleBStringsWithTestBase provides a mock function with given fields: apptBString, schedule
func (_m *BScheduleUtil) MergeScheduleBStringsWithTestBase(apptBString string, schedule string) (*string, error) {
	ret := _m.Called(apptBString, schedule)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*string, error)); ok {
		return rf(apptBString, schedule)
	}
	if rf, ok := ret.Get(0).(func(string, string) *string); ok {
		r0 = rf(apptBString, schedule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(apptBString, schedule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BScheduleUtil_MergeScheduleBStringsWithTestBase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MergeScheduleBStringsWithTestBase'
type BScheduleUtil_MergeScheduleBStringsWithTestBase_Call struct {
	*mock.Call
}

// MergeScheduleBStringsWithTestBase is a helper method to define mock.On call
//   - apptBString string
//   - schedule string
func (_e *BScheduleUtil_Expecter) MergeScheduleBStringsWithTestBase(apptBString interface{}, schedule interface{}) *BScheduleUtil_MergeScheduleBStringsWithTestBase_Call {
	return &BScheduleUtil_MergeScheduleBStringsWithTestBase_Call{Call: _e.mock.On("MergeScheduleBStringsWithTestBase", apptBString, schedule)}
}

func (_c *BScheduleUtil_MergeScheduleBStringsWithTestBase_Call) Run(run func(apptBString string, schedule string)) *BScheduleUtil_MergeScheduleBStringsWithTestBase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *BScheduleUtil_MergeScheduleBStringsWithTestBase_Call) Return(_a0 *string, _a1 error) *BScheduleUtil_MergeScheduleBStringsWithTestBase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BScheduleUtil_MergeScheduleBStringsWithTestBase_Call) RunAndReturn(run func(string, string) (*string, error)) *BScheduleUtil_MergeScheduleBStringsWithTestBase_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyScheduleAndBooking provides a mock function with given fields: scheduleBStringToModify, scheduleBStringToTest, appt
func (_m *BScheduleUtil) ModifyScheduleAndBooking(scheduleBStringToModify string, scheduleBStringToTest string, appt string) (*string, error) {
	ret := _m.Called(scheduleBStringToModify, scheduleBStringToTest, appt)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*string, error)); ok {
		return rf(scheduleBStringToModify, scheduleBStringToTest, appt)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *string); ok {
		r0 = rf(scheduleBStringToModify, scheduleBStringToTest, appt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(scheduleBStringToModify, scheduleBStringToTest, appt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BScheduleUtil_ModifyScheduleAndBooking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyScheduleAndBooking'
type BScheduleUtil_ModifyScheduleAndBooking_Call struct {
	*mock.Call
}

// ModifyScheduleAndBooking is a helper method to define mock.On call
//   - scheduleBStringToModify string
//   - scheduleBStringToTest string
//   - appt string
func (_e *BScheduleUtil_Expecter) ModifyScheduleAndBooking(scheduleBStringToModify interface{}, scheduleBStringToTest interface{}, appt interface{}) *BScheduleUtil_ModifyScheduleAndBooking_Call {
	return &BScheduleUtil_ModifyScheduleAndBooking_Call{Call: _e.mock.On("ModifyScheduleAndBooking", scheduleBStringToModify, scheduleBStringToTest, appt)}
}

func (_c *BScheduleUtil_ModifyScheduleAndBooking_Call) Run(run func(scheduleBStringToModify string, scheduleBStringToTest string, appt string)) *BScheduleUtil_ModifyScheduleAndBooking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *BScheduleUtil_ModifyScheduleAndBooking_Call) Return(_a0 *string, _a1 error) *BScheduleUtil_ModifyScheduleAndBooking_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BScheduleUtil_ModifyScheduleAndBooking_Call) RunAndReturn(run func(string, string, string) (*string, error)) *BScheduleUtil_ModifyScheduleAndBooking_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyScheduleAndBookingInterval provides a mock function with given fields: scheduleBStringToModify, scheduleBStringToTest, appt
func (_m *BScheduleUtil) ModifyScheduleAndBookingInterval(scheduleBStringToModify string, scheduleBStringToTest string, appt string) (*string, error) {
	ret := _m.Called(scheduleBStringToModify, scheduleBStringToTest, appt)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*string, error)); ok {
		return rf(scheduleBStringToModify, scheduleBStringToTest, appt)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *string); ok {
		r0 = rf(scheduleBStringToModify, scheduleBStringToTest, appt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(scheduleBStringToModify, scheduleBStringToTest, appt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BScheduleUtil_ModifyScheduleAndBookingInterval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyScheduleAndBookingInterval'
type BScheduleUtil_ModifyScheduleAndBookingInterval_Call struct {
	*mock.Call
}

// ModifyScheduleAndBookingInterval is a helper method to define mock.On call
//   - scheduleBStringToModify string
//   - scheduleBStringToTest string
//   - appt string
func (_e *BScheduleUtil_Expecter) ModifyScheduleAndBookingInterval(scheduleBStringToModify interface{}, scheduleBStringToTest interface{}, appt interface{}) *BScheduleUtil_ModifyScheduleAndBookingInterval_Call {
	return &BScheduleUtil_ModifyScheduleAndBookingInterval_Call{Call: _e.mock.On("ModifyScheduleAndBookingInterval", scheduleBStringToModify, scheduleBStringToTest, appt)}
}

func (_c *BScheduleUtil_ModifyScheduleAndBookingInterval_Call) Run(run func(scheduleBStringToModify string, scheduleBStringToTest string, appt string)) *BScheduleUtil_ModifyScheduleAndBookingInterval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *BScheduleUtil_ModifyScheduleAndBookingInterval_Call) Return(_a0 *string, _a1 error) *BScheduleUtil_ModifyScheduleAndBookingInterval_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BScheduleUtil_ModifyScheduleAndBookingInterval_Call) RunAndReturn(run func(string, string, string) (*string, error)) *BScheduleUtil_ModifyScheduleAndBookingInterval_Call {
	_c.Call.Return(run)
	return _c
}

// TestViabilityAndCompute provides a mock function with given fields: binary1, binary2
func (_m *BScheduleUtil) TestViabilityAndCompute(binary1 int64, binary2 int64) (*int64, error) {
	ret := _m.Called(binary1, binary2)

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*int64, error)); ok {
		return rf(binary1, binary2)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *int64); ok {
		r0 = rf(binary1, binary2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(binary1, binary2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BScheduleUtil_TestViabilityAndCompute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestViabilityAndCompute'
type BScheduleUtil_TestViabilityAndCompute_Call struct {
	*mock.Call
}

// TestViabilityAndCompute is a helper method to define mock.On call
//   - binary1 int64
//   - binary2 int64
func (_e *BScheduleUtil_Expecter) TestViabilityAndCompute(binary1 interface{}, binary2 interface{}) *BScheduleUtil_TestViabilityAndCompute_Call {
	return &BScheduleUtil_TestViabilityAndCompute_Call{Call: _e.mock.On("TestViabilityAndCompute", binary1, binary2)}
}

func (_c *BScheduleUtil_TestViabilityAndCompute_Call) Run(run func(binary1 int64, binary2 int64)) *BScheduleUtil_TestViabilityAndCompute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *BScheduleUtil_TestViabilityAndCompute_Call) Return(_a0 *int64, _a1 error) *BScheduleUtil_TestViabilityAndCompute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BScheduleUtil_TestViabilityAndCompute_Call) RunAndReturn(run func(int64, int64) (*int64, error)) *BScheduleUtil_TestViabilityAndCompute_Call {
	_c.Call.Return(run)
	return _c
}

// ValidDeletion provides a mock function with given fields: baseNumber, toDeleteNumber
func (_m *BScheduleUtil) ValidDeletion(baseNumber int64, toDeleteNumber int64) bool {
	ret := _m.Called(baseNumber, toDeleteNumber)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64, int64) bool); ok {
		r0 = rf(baseNumber, toDeleteNumber)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BScheduleUtil_ValidDeletion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidDeletion'
type BScheduleUtil_ValidDeletion_Call struct {
	*mock.Call
}

// ValidDeletion is a helper method to define mock.On call
//   - baseNumber int64
//   - toDeleteNumber int64
func (_e *BScheduleUtil_Expecter) ValidDeletion(baseNumber interface{}, toDeleteNumber interface{}) *BScheduleUtil_ValidDeletion_Call {
	return &BScheduleUtil_ValidDeletion_Call{Call: _e.mock.On("ValidDeletion", baseNumber, toDeleteNumber)}
}

func (_c *BScheduleUtil_ValidDeletion_Call) Run(run func(baseNumber int64, toDeleteNumber int64)) *BScheduleUtil_ValidDeletion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *BScheduleUtil_ValidDeletion_Call) Return(_a0 bool) *BScheduleUtil_ValidDeletion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BScheduleUtil_ValidDeletion_Call) RunAndReturn(run func(int64, int64) bool) *BScheduleUtil_ValidDeletion_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewBScheduleUtil interface {
	mock.TestingT
	Cleanup(func())
}

// NewBScheduleUtil creates a new instance of BScheduleUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBScheduleUtil(t mockConstructorTestingTNewBScheduleUtil) *BScheduleUtil {
	mock := &BScheduleUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
