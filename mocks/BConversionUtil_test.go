// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	models "github.com/keldonia/btime.go/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// BConversionUtil is an autogenerated mock type for the BConversionUtil type
type BConversionUtil struct {
	mock.Mock
}

type BConversionUtil_Expecter struct {
	mock *mock.Mock
}

func (_m *BConversionUtil) EXPECT() *BConversionUtil_Expecter {
	return &BConversionUtil_Expecter{mock: &_m.Mock}
}

// CalculateDate provides a mock function with given fields: timePointerIndex, baseDate, end
func (_m *BConversionUtil) CalculateDate(timePointerIndex int, baseDate *time.Time, end bool) *time.Time {
	ret := _m.Called(timePointerIndex, baseDate, end)

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func(int, *time.Time, bool) *time.Time); ok {
		r0 = rf(timePointerIndex, baseDate, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	return r0
}

// BConversionUtil_CalculateDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateDate'
type BConversionUtil_CalculateDate_Call struct {
	*mock.Call
}

// CalculateDate is a helper method to define mock.On call
//   - timePointerIndex int
//   - baseDate *time.Time
//   - end bool
func (_e *BConversionUtil_Expecter) CalculateDate(timePointerIndex interface{}, baseDate interface{}, end interface{}) *BConversionUtil_CalculateDate_Call {
	return &BConversionUtil_CalculateDate_Call{Call: _e.mock.On("CalculateDate", timePointerIndex, baseDate, end)}
}

func (_c *BConversionUtil_CalculateDate_Call) Run(run func(timePointerIndex int, baseDate *time.Time, end bool)) *BConversionUtil_CalculateDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*time.Time), args[2].(bool))
	})
	return _c
}

func (_c *BConversionUtil_CalculateDate_Call) Return(_a0 *time.Time) *BConversionUtil_CalculateDate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BConversionUtil_CalculateDate_Call) RunAndReturn(run func(int, *time.Time, bool) *time.Time) *BConversionUtil_CalculateDate_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertScheduleToAppointmentSchedule provides a mock function with given fields: schedule, availability
func (_m *BConversionUtil) ConvertScheduleToAppointmentSchedule(schedule *models.Schedule, availability []string) *models.AppointmentSchedule {
	ret := _m.Called(schedule, availability)

	var r0 *models.AppointmentSchedule
	if rf, ok := ret.Get(0).(func(*models.Schedule, []string) *models.AppointmentSchedule); ok {
		r0 = rf(schedule, availability)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AppointmentSchedule)
		}
	}

	return r0
}

// BConversionUtil_ConvertScheduleToAppointmentSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertScheduleToAppointmentSchedule'
type BConversionUtil_ConvertScheduleToAppointmentSchedule_Call struct {
	*mock.Call
}

// ConvertScheduleToAppointmentSchedule is a helper method to define mock.On call
//   - schedule *models.Schedule
//   - availability []string
func (_e *BConversionUtil_Expecter) ConvertScheduleToAppointmentSchedule(schedule interface{}, availability interface{}) *BConversionUtil_ConvertScheduleToAppointmentSchedule_Call {
	return &BConversionUtil_ConvertScheduleToAppointmentSchedule_Call{Call: _e.mock.On("ConvertScheduleToAppointmentSchedule", schedule, availability)}
}

func (_c *BConversionUtil_ConvertScheduleToAppointmentSchedule_Call) Run(run func(schedule *models.Schedule, availability []string)) *BConversionUtil_ConvertScheduleToAppointmentSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Schedule), args[1].([]string))
	})
	return _c
}

func (_c *BConversionUtil_ConvertScheduleToAppointmentSchedule_Call) Return(_a0 *models.AppointmentSchedule) *BConversionUtil_ConvertScheduleToAppointmentSchedule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BConversionUtil_ConvertScheduleToAppointmentSchedule_Call) RunAndReturn(run func(*models.Schedule, []string) *models.AppointmentSchedule) *BConversionUtil_ConvertScheduleToAppointmentSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertTimeSlotsStringToAppointments provides a mock function with given fields: timeSlots, date
func (_m *BConversionUtil) ConvertTimeSlotsStringToAppointments(timeSlots string, date *time.Time) *[]models.Appointment {
	ret := _m.Called(timeSlots, date)

	var r0 *[]models.Appointment
	if rf, ok := ret.Get(0).(func(string, *time.Time) *[]models.Appointment); ok {
		r0 = rf(timeSlots, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Appointment)
		}
	}

	return r0
}

// BConversionUtil_ConvertTimeSlotsStringToAppointments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertTimeSlotsStringToAppointments'
type BConversionUtil_ConvertTimeSlotsStringToAppointments_Call struct {
	*mock.Call
}

// ConvertTimeSlotsStringToAppointments is a helper method to define mock.On call
//   - timeSlots string
//   - date *time.Time
func (_e *BConversionUtil_Expecter) ConvertTimeSlotsStringToAppointments(timeSlots interface{}, date interface{}) *BConversionUtil_ConvertTimeSlotsStringToAppointments_Call {
	return &BConversionUtil_ConvertTimeSlotsStringToAppointments_Call{Call: _e.mock.On("ConvertTimeSlotsStringToAppointments", timeSlots, date)}
}

func (_c *BConversionUtil_ConvertTimeSlotsStringToAppointments_Call) Run(run func(timeSlots string, date *time.Time)) *BConversionUtil_ConvertTimeSlotsStringToAppointments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*time.Time))
	})
	return _c
}

func (_c *BConversionUtil_ConvertTimeSlotsStringToAppointments_Call) Return(_a0 *[]models.Appointment) *BConversionUtil_ConvertTimeSlotsStringToAppointments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BConversionUtil_ConvertTimeSlotsStringToAppointments_Call) RunAndReturn(run func(string, *time.Time) *[]models.Appointment) *BConversionUtil_ConvertTimeSlotsStringToAppointments_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewBConversionUtil interface {
	mock.TestingT
	Cleanup(func())
}

// NewBConversionUtil creates a new instance of BConversionUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBConversionUtil(t mockConstructorTestingTNewBConversionUtil) *BConversionUtil {
	mock := &BConversionUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
